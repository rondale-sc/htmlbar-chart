eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"htmlbar-chart/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"htmlbar-chart/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=htmlbar-chart/app.js");

;eval("define(\"htmlbar-chart/components/bar-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: [\'chart\'],\n      timescales: [1, 5, 10, 50, 100, 500, 1000, 10000],\n      colors: [ \'#5e9fb2\', \'#67ca85\' ],\n      timescaleForResults: function(results){\n        var values = Ember.$.map(results, function(r){\n          return r.value;\n        });\n        var max = Math.max.apply(null, values);\n        var timescale = this.timescales[0];\n        Ember.$.each(this.timescales, function(t){\n          if(t > max){\n            timescale = t;\n            return false;\n          }\n        });\n        return timescale;\n      },\n\n      styleForResult: function(timescale, i, result){\n        var percent = (result/timescale) * 100;\n        return \'width: \'+percent+\'%; background-color: \'+this.colors[i]+\';\';\n      },\n\n      metrics: Ember.computed(\'values\', function(){\n        var self = this;\n        return Ember.$.map(this.get(\'values\'), function(results, name){\n          var timescale = self.timescaleForResults(results);\n          return {\n            name: name,\n            results: Ember.$.map(results, function(r, i){\n              return {\n                name: r.name,\n                value: r.value + \' ms\',\n                style: self.styleForResult(timescale, i, r.value),\n              };\n            })\n          };\n        });\n      }),\n\n\n\n    });\n  });//# sourceURL=htmlbar-chart/components/bar-chart.js");

;eval("define(\"htmlbar-chart/controllers/index\", \n  [\"ember\",\"htmlbars-compiler/compiler\",\"htmlbar-chart/examples\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var htmlbarsCompileSpec = __dependency2__.compileSpec;\n    var examples = __dependency3__[\"default\"];\n\n    function renderTime(name) {\n      return Ember.computed(\'time.render.\' + name + \'.start\', \'time.render.\' + name + \'.stop\', function(){\n        var start = this.get(\'time.render.\' + name + \'.start\');\n        var stop = this.get(\'time.render.\' + name + \'.stop\');\n        return (stop - start).toFixed(4);\n      });\n    }\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      daTemplate: \'\',\n      daContext: \'\',\n      handlebarsJsonContext: null,\n      htmlbarsJsonContext: null,\n\n      jsonParseError: true,\n\n      time: {\n        render: {\n          handlebars: {\n            start: null,\n            stop: null\n          },\n          htmlbars: {\n            start: null,\n            stop: null\n          }\n        }\n      },\n\n      init: function() {\n        this._super();\n        this.set(\'examples\', this.exampleOptions());\n        this.subscribeToRender();\n      },\n\n      timer: Ember.observer(function(){\n        var self = this;\n        var timer = setInterval(function(){\n          self.set(\'jsonContext\', Ember.$.extend({},self.get(\'jsonContext\')));\n        }, 200);\n      }).on(\'init\'),\n\n      exampleOptions: function(){\n        return Ember.$.map(examples, function(e, i){\n          return { text: e.name, value: i };\n        });\n      },\n\n      subscribeToRender: function(){\n        var self = this;\n        Ember.subscribe(\"render\", {\n          before: function(name, timestamp) {\n            if (name.indexOf(\'render-time\') !== -1) {\n              var parts = name.split(\'.\');\n              self.set(\'time.render.\'+parts[2]+\'.start\', timestamp);\n            }\n          },\n\n          after: function(name, timestamp) {\n            if (name.indexOf(\'render-time\') !== -1) {\n              var parts = name.split(\'.\');\n              self.set(\'time.render.\'+parts[2]+\'.stop\', timestamp);\n            }\n          }\n        });\n      },\n\n      renderCounter: 0,\n      renderTimes: [],\n      pushRenderTimes: function(times){\n        this.incrementProperty(\'renderCounter\');\n        var count = this.get(\'renderCounter\');\n        var self = this;\n        Ember.$.each(times, function(i, t){\n          var avg = self.renderTimes[i];\n          if(typeof(avg) == \'undefined\'){\n            avg = 0;\n          }\n          var totes = avg * (count - 1);\n          self.renderTimes[i] = (totes + t)/count;\n        });\n      },\n\n      chartValues: Ember.computed(\'htmlbarsRenderTime\', \'handlebarsRenderTime\', function(){\n        this.pushRenderTimes([ parseFloat(this.get(\'handlebarsRenderTime\')), parseFloat(this.get(\'htmlbarsRenderTime\'))]);\n        var label = \'Render Avg (\'+this.renderCounter+\' samples)\';\n        var values = {};\n\n        values[label] = [\n          {\n            name: \'Handlebars\',\n            value: this.renderTimes[0].toFixed(4),\n          },\n          {\n            name: \'HTMLBars\',\n            value: this.renderTimes[1].toFixed(4),\n          }\n        ];\n\n        values[\'Render\'] = [\n          {\n            name: \'Handlebars\',\n            value: parseFloat(this.get(\'handlebarsRenderTime\')),\n          },\n          {\n            name: \'HTMLBars\',\n            value: parseFloat(this.get(\'htmlbarsRenderTime\'))\n          }\n        ];\n\n        return values;\n      }),\n\n      changeExample: Ember.observer(\'selectedExample\', function(){\n        this.set(\'daTemplate\', examples[this.get(\'selectedExample\')].template);\n        this.set(\'daContext\', JSON.stringify(examples[this.get(\'selectedExample\')].context || {}));\n      }),\n\n      handlebarsRenderTime: renderTime(\'handlebars\'),\n\n      htmlbarsRenderTime: renderTime(\'htmlbars\'),\n\n      precompiledHandlebars: Ember.computed(\'daTemplate\', function(){\n        try {\n          return Ember.Handlebars.precompile(this.get(\'daTemplate\'));\n        }\n        catch (e) {\n          this.set(\'templateParseError\', true);\n        }\n      }),\n\n      precompiledHTMLBars: Ember.computed(\'daTemplate\', function(){\n        try {\n          this.set(\'templateParseError\', false);\n          return htmlbarsCompileSpec(this.get(\'daTemplate\'));\n        }\n        catch (e) {\n          this.set(\'templateParseError\', true);\n          return \"/* \"+e.message+\" */\";\n        }\n      }),\n\n      handlebarsTemplate: Ember.computed(\'precompiledHandlebars\', function(){\n        try {\n          return Ember.Handlebars.template(eval(this.get(\'precompiledHandlebars\')));\n        }\n        catch (e) {\n          this.set(\'templateParseError\', true);\n        }\n      }),\n\n      htmlbarsTemplate: Ember.computed(\'precompiledHTMLBars\', function(){\n        return new Function(\'return \' + this.get(\'precompiledHTMLBars\'))();\n      }),\n\n      parseJson: Ember.observer(\'daContext\', \'daTemplate\', function(){\n        try {\n          this.set(\'jsonParseError\', false);\n          this.set(\'jsonContext\', JSON.parse(this.get(\'daContext\')));\n        }\n        catch (e) {\n          this.set(\'jsonParseError\', true);\n          this.set(\'jsonContext\', null);\n        }\n      }).on(\'init\'),\n\n      highlightedHTMLBars: Ember.computed(\'precompiledHTMLBars\', function() {\n        // prettify will remove error comment\n        if(this.get(\'templateParseError\')){\n          return this.highlight(this.get(\'precompiledHTMLBars\'));\n        }else{\n          return this.highlight(this.prettify(this.get(\'precompiledHTMLBars\')));\n        }\n      }),\n\n      highlightedHandlebars: Ember.computed(\'precompiledHandlebars\', function() {\n        return this.highlight(this.prettify(this.get(\'precompiledHandlebars\')));\n      }),\n\n      prettify: function(precompiled) {\n        var ast = esprima.parse(precompiled);\n        return escodegen.generate(ast, { format: { indent: { style: \'  \' } } });\n      },\n\n      highlight: function(source) {\n        return hljs.highlight(\'javascript\', source).value;\n      },\n\n    });\n  });//# sourceURL=htmlbar-chart/controllers/index.js");

;eval("define(\"htmlbar-chart/examples\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Examples;\n\n    Examples = [\n      {\n        name: \"nested html\",\n        template: \"<h1>{{title}}</h1>\\n<ul>\\n  <li>{{text}}</li>\\n  <li>{{{raw}}}</li>\\n</ul>\",\n        context: {\n          title: \"Hey!\",\n          text: \"This is\",\n          raw: \"a <em>list</em>\"\n        }\n      }, {\n        name: \"a text node\",\n        template: \"text node\"\n      }, {\n        name: \"a mustache\",\n        template: \"{{name}}\",\n        context: {\n          name: \"mustache\"\n        }\n      }, {\n        name: \"two mustaches side by side\",\n        template: \"{{name1}}{{name2}}\",\n        context: {\n          name1: \"must\",\n          name2: \"ache\"\n        }\n      }\n    ];\n\n    __exports__[\"default\"] = Examples;\n  });//# sourceURL=htmlbar-chart/examples.js");

;eval("define(\"htmlbar-chart/initializers/export-application-global\", \n  [\"ember\",\"htmlbar-chart/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=htmlbar-chart/initializers/export-application-global.js");

;eval("define(\"htmlbar-chart/router\", \n  [\"ember\",\"htmlbar-chart/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=htmlbar-chart/router.js");

;eval("define(\"htmlbar-chart/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=htmlbar-chart/templates/application.js");

;eval("define(\"htmlbar-chart/templates/components/bar-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n  <p>\");\n      stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n  \");\n      stack1 = helpers.each.call(depth0, \"results\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n    <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'style\': (\"style\")\n      },hashTypes:{\'style\': \"STRING\"},hashContexts:{\'style\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" <span class=\'value\'>\");\n      stack1 = helpers._triageMustache.call(depth0, \"value\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span></div>\\n  \");\n      return buffer;\n      }\n\n      stack1 = helpers.each.call(depth0, \"metrics\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=htmlbar-chart/templates/components/bar-chart.js");

;eval("define(\"htmlbar-chart/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n      data.buffer.push(\"<header>\\n  <h1>HTMLBar Chart!</h1>\\n  <p><b>Please note</b>: this is based on a WIP branch of HTMLBars that supports only basic data binding</p>\\n</header>\\n<div>\\n  <div class=\\\"inline\\\">\\n    <p>Examples</p>\\n    \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Select\", {hash:{\n        \'class\': (\"select\"),\n        \'content\': (\"examples\"),\n        \'optionLabelPath\': (\"content.text\"),\n        \'optionValuePath\': (\"content.value\"),\n        \'value\': (\"selectedExample\")\n      },hashTypes:{\'class\': \"STRING\",\'content\': \"ID\",\'optionLabelPath\': \"STRING\",\'optionValuePath\': \"STRING\",\'value\': \"ID\"},hashContexts:{\'class\': depth0,\'content\': depth0,\'optionLabelPath\': depth0,\'optionValuePath\': depth0,\'value\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\n  </div>\\n  <div class=\\\"inline\\\">\\n    <p>Template</p>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{\n        \'value\': (\"daTemplate\"),\n        \'class\': (\"template-input\"),\n        \'classNameBindings\': (\"templateParseError\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\",\'classNameBindings\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0,\'classNameBindings\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n      data.buffer.push(\"\\n  </div>\\n  <div class=\\\"inline\\\">\\n    <p>Context</p>\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers.textarea || (depth0 && depth0.textarea),options={hash:{\n        \'value\': (\"daContext\"),\n        \'class\': (\"context-input\"),\n        \'classNameBindings\': (\"jsonParseError\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\",\'classNameBindings\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0,\'classNameBindings\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n      data.buffer.push(\"\\n  </div>\\n</div>\\n\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'bar-chart\'] || (depth0 && depth0[\'bar-chart\']),options={hash:{\n        \'values\': (\"chartValues\")\n      },hashTypes:{\'values\': \"ID\"},hashContexts:{\'values\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"bar-chart\", options))));\n      data.buffer.push(\"\\n\\n<div class=\\\"inline\\\">\\n  <h2>Handlebars</h2>\\n  <p>Render Time: \");\n      stack1 = helpers._triageMustache.call(depth0, \"handlebarsRenderTime\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" ms</p>\\n  <div class=\\\"precompile\\\">\\n    <code class=\\\"hljs javascript\\\">\\n      \");\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"highlightedHandlebars\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\n    </code>\\n  </div>\\n  \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, {hash:{\n        \'class\': (\"rendered\"),\n        \'instrumentName\': (\"render-time.handlebars\"),\n        \'template\': (\"handlebarsTemplate\"),\n        \'context\': (\"jsonContext\")\n      },hashTypes:{\'class\': \"STRING\",\'instrumentName\': \"STRING\",\'template\': \"ID\",\'context\': \"ID\"},hashContexts:{\'class\': depth0,\'instrumentName\': depth0,\'template\': depth0,\'context\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"\\n</div>\\n<div class=\\\"inline\\\">\\n  <h2>HTMLbars</h2>\\n  <p>Render Time: \");\n      stack1 = helpers._triageMustache.call(depth0, \"htmlbarsRenderTime\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" ms</p>\\n  <div class=\\\"precompile\\\">\\n    <code class=\\\"hljs javascript\\\">\\n      \");\n      data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"highlightedHTMLBars\", {hash:{\n        \'unescaped\': (\"true\")\n      },hashTypes:{\'unescaped\': \"STRING\"},hashContexts:{\'unescaped\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"\\n    </code>\\n  </div>\\n  \");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, {hash:{\n        \'class\': (\"rendered\"),\n        \'instrumentName\': (\"render-time.htmlbars\"),\n        \'template\': (\"htmlbarsTemplate\"),\n        \'context\': (\"jsonContext\")\n      },hashTypes:{\'class\': \"STRING\",\'instrumentName\': \"STRING\",\'template\': \"ID\",\'context\': \"ID\"},hashContexts:{\'class\': depth0,\'instrumentName\': depth0,\'template\': depth0,\'context\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=htmlbar-chart/templates/index.js");

;eval("define(\"htmlbar-chart/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/app.jshint.js");

;eval("define(\"htmlbar-chart/tests/components/bar-chart.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/bar-chart.js should pass jshint\', function() { \n      ok(true, \'components/bar-chart.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/components/bar-chart.jshint.js");

;eval("define(\"htmlbar-chart/tests/controllers/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/index.js should pass jshint\', function() { \n      ok(false, \'controllers/index.js should pass jshint.\\ncontrollers/index.js: line 80, col 24, Expected \\\'===\\\' and instead saw \\\'==\\\'.\\ncontrollers/index.js: line 42, col 9, \\\'timer\\\' is defined but never used.\\n\\n2 errors\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/controllers/index.jshint.js");

;eval("define(\"htmlbar-chart/tests/helpers/resolver\", \n  [\"ember/resolver\",\"htmlbar-chart/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=htmlbar-chart/tests/helpers/resolver.js");

;eval("define(\"htmlbar-chart/tests/helpers/start-app\", \n  [\"ember\",\"htmlbar-chart/app\",\"htmlbar-chart/router\",\"htmlbar-chart/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=htmlbar-chart/tests/helpers/start-app.js");

;eval("define(\"htmlbar-chart/tests/htmlbar-chart/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - htmlbar-chart/tests/helpers\');\n    test(\'htmlbar-chart/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'htmlbar-chart/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/htmlbar-chart/tests/helpers/resolver.jshint.js");

;eval("define(\"htmlbar-chart/tests/htmlbar-chart/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - htmlbar-chart/tests/helpers\');\n    test(\'htmlbar-chart/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'htmlbar-chart/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/htmlbar-chart/tests/helpers/start-app.jshint.js");

;eval("define(\"htmlbar-chart/tests/htmlbar-chart/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - htmlbar-chart/tests\');\n    test(\'htmlbar-chart/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'htmlbar-chart/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/htmlbar-chart/tests/test-helper.jshint.js");

;eval("define(\"htmlbar-chart/tests/htmlbar-chart/tests/unit/controllers/index-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - htmlbar-chart/tests/unit/controllers\');\n    test(\'htmlbar-chart/tests/unit/controllers/index-test.js should pass jshint\', function() { \n      ok(true, \'htmlbar-chart/tests/unit/controllers/index-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/htmlbar-chart/tests/unit/controllers/index-test.jshint.js");

;eval("define(\"htmlbar-chart/tests/htmlbar-chart/tests/unit/views/rendered-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - htmlbar-chart/tests/unit/views\');\n    test(\'htmlbar-chart/tests/unit/views/rendered-test.js should pass jshint\', function() { \n      ok(true, \'htmlbar-chart/tests/unit/views/rendered-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/htmlbar-chart/tests/unit/views/rendered-test.jshint.js");

;eval("define(\"htmlbar-chart/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=htmlbar-chart/tests/router.jshint.js");

;eval("define(\"htmlbar-chart/tests/test-helper\", \n  [\"htmlbar-chart/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=htmlbar-chart/tests/test-helper.js");

;eval("define(\"htmlbar-chart/tests/unit/controllers/index-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'controller:index\', \'IndexController\', {\n      // Specify the other units that are required for this test.\n      // needs: [\'controller:foo\']\n    });\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var controller = this.subject();\n      ok(controller);\n    });\n  });//# sourceURL=htmlbar-chart/tests/unit/controllers/index-test.js");

;eval("define(\"htmlbar-chart/tests/unit/views/rendered-test\", \n  [\"ember-qunit\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var test = __dependency1__.test;\n\n    moduleFor(\'view:rendered\', \'RenderedView\');\n\n    // Replace this with your real tests.\n    test(\'it exists\', function() {\n      var view = this.subject();\n      ok(view);\n    });\n  });//# sourceURL=htmlbar-chart/tests/unit/views/rendered-test.js");

/* jshint ignore:start */

define('htmlbar-chart/config/environment', ['ember'], function(Ember) {
  var prefix = 'htmlbar-chart';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */


});

if (runningTests) {
  require('htmlbar-chart/tests/test-helper');
} else {
  require('htmlbar-chart/app')['default'].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
